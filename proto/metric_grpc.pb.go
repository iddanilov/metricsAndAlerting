// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/metric.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricsAndAlerting_SaveMetrics_FullMethodName = "/demo.MetricsAndAlerting/SaveMetrics"
)

// MetricsAndAlertingClient is the client API for MetricsAndAlerting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsAndAlertingClient interface {
	SaveMetrics(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricResponse, error)
}

type metricsAndAlertingClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsAndAlertingClient(cc grpc.ClientConnInterface) MetricsAndAlertingClient {
	return &metricsAndAlertingClient{cc}
}

func (c *metricsAndAlertingClient) SaveMetrics(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricResponse, error) {
	out := new(MetricResponse)
	err := c.cc.Invoke(ctx, MetricsAndAlerting_SaveMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsAndAlertingServer is the server API for MetricsAndAlerting service.
// All implementations must embed UnimplementedMetricsAndAlertingServer
// for forward compatibility
type MetricsAndAlertingServer interface {
	SaveMetrics(context.Context, *MetricRequest) (*MetricResponse, error)
}

// UnimplementedMetricsAndAlertingServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsAndAlertingServer struct {
}

func (UnimplementedMetricsAndAlertingServer) SaveMetrics(context.Context, *MetricRequest) (*MetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMetrics not implemented")
}
func (UnimplementedMetricsAndAlertingServer) mustEmbedUnimplementedMetricsAndAlertingServer() {}

// UnsafeMetricsAndAlertingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsAndAlertingServer will
// result in compilation errors.
type UnsafeMetricsAndAlertingServer interface {
	mustEmbedUnimplementedMetricsAndAlertingServer()
}

func RegisterMetricsAndAlertingServer(s grpc.ServiceRegistrar, srv MetricsAndAlertingServer) {
	s.RegisterService(&MetricsAndAlerting_ServiceDesc, srv)
}

func _MetricsAndAlerting_SaveMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsAndAlertingServer).SaveMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsAndAlerting_SaveMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsAndAlertingServer).SaveMetrics(ctx, req.(*MetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsAndAlerting_ServiceDesc is the grpc.ServiceDesc for MetricsAndAlerting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsAndAlerting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.MetricsAndAlerting",
	HandlerType: (*MetricsAndAlertingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveMetrics",
			Handler:    _MetricsAndAlerting_SaveMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/metric.proto",
}
